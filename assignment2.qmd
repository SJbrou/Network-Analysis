---
format: 
  html:
    code-fold: show
    toc: false
    width: full
---

# Assignment week 2 {.unnumbered}

Questions can be found on [canvas](https://canvas.vu.nl/courses/78407/assignments/361410)

## Question 1.

**Clustering Coefficient of B:**
- *Direct neighbors of B*: A, C, E, F, & G → \( n = 5 \)
- *Potential links*: \( \frac{n(n-1)}{2} \) → \( \frac{5(5-1)}{2} = 10 \) potential links
- *Existing links between neighbors*: A-C, A-E, E-F, F-G (4 links)
- *Clustering coefficient of B*: \( \frac{4}{10} = 0.4 \)

**Clustering Coefficient of G:**
- *Direct neighbors of G*: A, D, & F → \( n = 3 \)
- *Potential links*: \( \frac{n(n-1)}{2} \) → \( \frac{3(3-1)}{2} = 3 \) potential links
- *Existing link between neighbors*: B-F (1 link)
- *Clustering coefficient of G*: \( \frac{1}{3} \approx 0.33 \)


## Question 2

Assuming higher values correspond to higher payoffs there is one dominant theory for all players, and thus 1 equilibrium.

|     |         |
|-----|---------|
| 1,4 | **6,5** |
| 3,3 | 4,2     |

## Question 3

a\. Table:

|           |            |           |           |
|-----------|------------|-----------|-----------|
|           | Product A  | Product B | Not enter |
| Product A | -10M, -10M | 10M, 10M  | 15M, 0    |
| Product B | 10M, 10M   | 5M, 5M    | 15M, 0    |
| Not enter | 0, 15M     | 0, 15M    | 0,0       |

B. One of your employees argues that you should enter the market (although he is not sure\
what product you should produce) because no matter what firm 2 does, entering and\
producing product B is better than not entering. Evaluate this argument.\
*Obviously making any profit can be valued over making no profit. Thus producing product B \> not entering the market*

C. Another employee agrees with the person in part (b) and argues that as strategy A could\
result in a loss (if the other firm also produces A) you should enter and produce B. If both\
firms reason this way, and thus enter and produce product B, will their play of the game\
form a Nash equilibrium? Explain.\
*This is NOT a Nash equilibrium as each firm has a better alternative: they can increase profits by switching to product A if they know the other is producing the other product.* 

D. find all the pure strategy Nash equilibria of this game\
*(Product A, Product B) or (Product B, Product A)*

E. Another employee of your firm suggests merging the two firms and deciding co-operatively\
on strategies so as to maximize the sum of profits. Ignoring whether this merger would\
be allowed by the regulators do you think its a good idea? Explain.\

No. In a merger the maximal profit would be 20M. Assume one firm starts producing product A, the optimal strategy for the other firm is to produce the other product, in which case the total profits of the firms combined would also be 20M. As it is in both firms intrests to follow the cooperative strategy, there is no incentive to merge.


## Question 4

Before starting the exercises, lets clear the workspace and load dependencies.

```{r setup, results='hide'}
# Clear workspace
rm(list = ls())


# This is a complex way of loading al required packages. simply calling:
# library(readxl) should suffice.

# Load dependencies
install_and_load <- function(packages) {
  installed_packages <- rownames(installed.packages())                                # Check installed packages
  to_install <- packages[!(packages %in% installed_packages)]
  if (length(to_install) > 0) {                                                       # Install missing
    install.packages(to_install, dependencies = TRUE)
  }
  suppressMessages(lapply(packages, require, character.only = TRUE, quietly = TRUE))  # Load
}
install_and_load(c("tidyverse", "readxl", "ggplot2", "plotly", "dplyr", "lubridate", "readr", "igraph", "visNetwork", "threejs", "igraphdata", "networkD3"))

```

```{r codeQ4, message=FALSE, warning=FALSE, results='hide'}
# Read in Data

data("USairports")

# Now simply data and remove self loops (they make for horrible plots)

g <- simplify(USairports, remove.loops = TRUE, remove.multiple = TRUE)

# Now you are good to go to work with the graph "g"

# a: Plot the data
pdf("Data_plot_g.pdf", width = 20, height = 20)
plot(g,
     vertex.label = NA,
     vertex.color = "red",
     vertex.frame.color = "black",
     vertex.label.cex = 0.5,
     vertex.size =  1.5,
     vertex.shape = "circle",
     edge.color = 'pink',
     edge.width = 0.5,
     edge.arrow.width = 0.01,
     edge.arrow.size = 0.05,
     layout = layout_nicely(g),
     main = "Data Plot of US Airport Network")
dev.off()

# b: What is the mean distance of this network?
g.apl <- mean_distance(g, directed = TRUE)
g.apl #3.52743

# Generating 1000 random graphs
gl <- vector('list', 1000)
for(i in 1:1000) {
  gl[[i]] <- erdos.renyi.game(n = gorder(g),
                              p.or.m = edge_density(g),
                              type = "gnp")
}

# Calculating average path length of 1000 random graps
gl.apls <- unlist(lapply(gl, mean_distance, directed = FALSE))

hist(gl.apls, breaks = 10, xlim = range(c(2.5, 4)))
abline(v = mean_distance(g, directed = FALSE),
       col = "red",
       lty = 3,
       lwd = 2)

# c: Calculate the betweenness measure for each node
g.b <- betweenness(g)
pdf('Betweenness.g.pdf', width = 10, height = 10)
plot(g,
     vertex.color = "red",
     vertex.frame.color = "black",
     vertex.label.cex = 0.5,
     vertex.size = (sqrt(g.b)+1)/50,
     vertex.shape = "circle",
     edge.color = "pink",
     edge.width = 0.5,
     edge.arrow.width = 0.01,
     edge.arrow.size = 0.05,
     layout=layout_nicely(g))
dev.off()

g.b <- betweenness(g)
max_betweenness <- max(g.b)
largest_betweenness_node <- which(g.b == max_betweenness)
print(max_betweenness)
#[1] 203156.7
print(largest_betweenness_node)
# ANC

# d: Calculate the out-degree for each node. What is the largest one?
out_degree_values <- degree(g, mode = "out")

# Find the node with the maximum out-degree
max_out_degree <- max(out_degree_values)
max_out_degree_node <- which(out_degree_values == max_out_degree)

max_out_degree #163
max_out_degree_node #ATL 148

# Scale out-degree values for visualization (apply log transformation for better size scaling)
vertex_sizes_out_degree <- log(out_degree_values + 1) * 3.5  

# Plot the graph with vertex size based on out-degree
pdf("Out_degree.pdf", width = 10, height = 10)
plot(g, 
     vertex.color = "pink",
     vertex.frame.color = "black",
     vertex.size = vertex_sizes_out_degree,
     vertex.label.cex = 0.5,
     vertex.size = 0.5,
     vertex.shape = "circle",
     edge.color = "skyblue",
     edge.width = 0.5,
     edge.arrow.width = 0.01,
     edge.arrow.size = 0.05,
     layout=layout_nicely(g),
     main = "US Airports Network with Vertex Size Based on Out-Degree"
)
dev.off()

```
# Question 5



```{r question_5, message=FALSE, warning=FALSE}

# Load data
graph <- read_delim("data/assignment2/graph.csv", ";", escape_double = FALSE, trim_ws = TRUE)
attributes <- read_delim("data/assignment2/attributes.csv", ";", escape_double = FALSE, trim_ws = TRUE)

# Rename columns
colnames(graph) <- c("Source", "Target", "Type", "Weight")
colnames(attributes) <- c("Id", "Label", "Fighting", "Centrality")

# Merge data
g <- graph_from_data_frame(d = graph, vertices = attributes, directed = FALSE)

# Remove nodes without edges
g <- delete.vertices(g, V(g)[degree(g) == 0])

# Calculate eigencentrality
V(g)$eigencentrality <- eigen_centrality(g)$vector

# Allies green, enemies red
E(g)$color <- ifelse(E(g)$Weight == 1, "lightgreen", "red")

# Define vertex sizes and labels based on eigencentrality
V(g)$size <- V(g)$eigencentrality
V(g)$label <- round(V(g)$eigencentrality, 2)

# Plot
plot(g,
     vertex.label = V(g)$label,
     vertex.label.cex = 0.8,
     vertex.label.color = "black",
     vertex.size = 10 * V(g)$eigencentrality,
     vertex.color = "white",
     vertex.frame.color = "black",
     vertex.shape = "circle",
     edge.width = 1,
     edge.color = E(g)$color,
     layout = layout_with_fr(g, niter = 1000),
     main = "Plot with Eigencentrality and Allies/Enemies")


```



```{r}
# Given spinglass cluster
clusters <- cluster_spinglass(g)

# Set cluster membership as vertex attribute
V(g)$cluster <- membership(clusters)

# Couldn't get graphJS to work. 
# Plot
nodes <- data.frame(
  id = V(g)$name,
  label = V(g)$Label,
  value = V(g)$eigencentrality * 10,
  group = V(g)$cluster,
  title = paste("Centrality:", round(V(g)$eigencentrality, 2))
)

edges <- data.frame(
  from = as.character(graph$Source),
  to = as.character(graph$Target),
  color = ifelse(E(g)$Weight > 0, "green", "red"),
  dashes = ifelse(E(g)$Weight > 0, FALSE, TRUE),
  title = paste("Weight:", E(g)$Weight)
)

# Plot
visNetwork(nodes, edges) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123) %>%
  visLegend(useGroups = TRUE) %>%
  visPhysics(stabilization = TRUE)

```



```{r fastgreedcluster}
# Fast Greedy clustering
fast_greedy_clusters <- cluster_fast_greedy(g)

# Set clusters as vertex attribute
V(g)$cluster <- membership(fast_greedy_clusters)


# Couldn't get grapJS to work... used visNetwork instead. 

nodes <- data.frame(
  id = V(g)$name,
  label = V(g)$Label,
  value = V(g)$eigencentrality * 10,
  group = V(g)$cluster,
  title = paste("Centrality:", round(V(g)$eigencentrality, 2))
)

# Create edges data frame for visNetwork
edges <- data.frame(
  from = as.character(graph$Source),
  to = as.character(graph$Target),
  color = ifelse(E(g)$Weight > 0, "green", "red"),
  dashes = ifelse(E(g)$Weight > 0, FALSE, TRUE),
  title = paste("Weight:", E(g)$Weight)
)

# Plot
visNetwork(nodes, edges) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123) %>%
  visLegend(useGroups = TRUE) %>%
  visPhysics(stabilization = TRUE)


```


### Differences between the clustering models

springlass clustering takes into account both positive and negative weights, while fast greedy focusses more on modularity.\
For instance, fast and greedy does not show the intricacies between the blue and pink group that the springglass clustering does show.\
However, fast and greedy shows more differences in the green cluster.\
Appearantly, the clustering methods value the positive edge from MM-y and MM-P to BARDC-JK, or their edge to DFLR differently.\

The spinglass clustering method accounts for both types of interactions (positive and negative), which is why it detects relationships and communities (such as between the blue and pink groups) that fast greedy clustering overlooks.
fast greedy seems to emphasize the structure of the green cluster more than spinglass, suggesting it values modularity-based separations more than the detailed dynamics of edge relationships (positive/negative).
This is also seen in what we think are differences for edge sensitify: dor instance, the relationship between MM-y, MM-P, BARDC-JK, and DFLR seems to be valued differently between the clustering methods. Cluster_spinglass likely views the relationships more holistically, factoring in both positive and negative weights, while fast_greedy focuses more on the positive connections and modularity, leading to differences in how edges are interpreted and clusters are formed.
